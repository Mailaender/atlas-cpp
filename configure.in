dnl Initialise autoconf

AC_INIT()

dnl Initialise automake

AM_INIT_AUTOMAKE("Atlas", "0.3.9")
AM_CONFIG_HEADER(config.h)

dnl Test for GNU libtool

AM_PROG_LIBTOOL

dnl Test for C++ Language


dnl Test for C++ compiler

AC_PROG_CXX

dnl Test for ANSI standard language features


dnl Test for C++ bool keyword

AC_MSG_CHECKING([for C++ bool keyword])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_bool,
[
    AC_TRY_COMPILE(,
    [
        bool t = true, f = false;
    ],
    [
        ac_cv_feature_bool=yes
    ],
    [
        ac_cv_feature_bool=no
    ])
])

if test "$ac_cv_feature_bool" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ namespaces

AC_MSG_CHECKING([for C++ namespaces])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_namespaces,
[
    AC_TRY_COMPILE(
    [
        namespace foo { int i; }
        namespace bar { int i; }
        namespace baz { int i; }

        using namespace foo;
        using bar::i;
    ],
    [
        foo::i = 1;
        bar::i = 2;
        baz::i = 3;
    ],
    [
        ac_cv_feature_namespaces=yes
    ],
    [
        ac_cv_feature_namespaces=no
    ])
])

if test "$ac_cv_feature_namespaces" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ templates

AC_MSG_CHECKING([for C++ templates])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_templates,
[
    AC_TRY_COMPILE(
    [
			template <class T>
			class foo
			{
			    T t;

			    public:

			    foo(T t) : t(t) { }
			};
		        ],
    [
			foo<int> f(1);
		        ],
    [
        ac_cv_feature_templates=yes
    ],
    [
        ac_cv_feature_templates=no
    ])
])

if test "$ac_cv_feature_templates" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ typename keyword

AC_MSG_CHECKING([for C++ typename keyword])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_typename,
[
    AC_TRY_COMPILE(
    [
			    template <typename T>
			    class foo
			    {
				T t;

				public:

				foo(T t) : t(t) { }
			    };
			    ],
    [
			    foo<int> f(1);
			    ],
    [
        ac_cv_feature_typename=yes
    ],
    [
        ac_cv_feature_typename=no
    ])
])

if test "$ac_cv_feature_typename" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ exception handling

AC_MSG_CHECKING([for C++ exception handling])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_exceptions,
[
    AC_TRY_COMPILE(,
    [
			try
			{
			    throw 17;
			}
			catch (int i)
			{
			}
			catch (...)
			{
			}
		        ],
    [
        ac_cv_feature_exceptions=yes
    ],
    [
        ac_cv_feature_exceptions=no
    ])
])

if test "$ac_cv_feature_exceptions" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ Standard Library


dnl Test for <cassert> header file

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(cassert)

AC_LANG_RESTORE

dnl Test for <cstdarg> header file

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(cstdarg)

AC_LANG_RESTORE

dnl Test for <cstdio> header file

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(cstdio)

AC_LANG_RESTORE

dnl Test for <iostream> header file

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(iostream)

AC_LANG_RESTORE

dnl Test for <list> header file

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(list)

AC_LANG_RESTORE

dnl Test for <map> header file

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(map)

AC_LANG_RESTORE

dnl Test for <cstdlib> header file

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(cstdlib)

AC_LANG_RESTORE

dnl Test for <cstring> header file

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(cstring)

AC_LANG_RESTORE

dnl Test for <string> header file

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(string)

AC_LANG_RESTORE

dnl Test for <vector> header file

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(vector)

AC_LANG_RESTORE

dnl Test for gzip compression library

AC_ARG_WITH(zlib,
[  --with-zlib=DIR         gzip compression library (optional)],
[with_zlib="$withval"],
[with_zlib=""])

ac_save_CFLAGS="$CFLAGS"
ac_save_LIBS="$LIBS"
CFLAGS="$CFLAGS -I$with_zlib/include"
LIBS="$LIBS -L$with_zlib/lib"

AC_CHECK_LIB(z, inflate)

AC_CHECK_HEADERS(zlib.h)

CFLAGS="$ac_save_CFLAGS"
LIBS="$ac_save_LIBS"

dnl Test for bzip2 compression library

AC_ARG_WITH(bzlib,
[  --with-bzlib=DIR        bzip2 compression library (optional)],
[with_bzlib="$withval"],
[with_bzlib=""])

ac_save_CFLAGS="$CFLAGS"
ac_save_LIBS="$LIBS"
CFLAGS="$CFLAGS -I$with_bzlib/include"
LIBS="$LIBS -L$with_bzlib/lib"

AC_CHECK_LIB(bz2, bzCompressInit)

AC_CHECK_HEADERS(bzlib.h)

CFLAGS="$ac_save_CFLAGS"
LIBS="$ac_save_LIBS"

dnl Generate files

AC_OUTPUT([
	Makefile
	src/Makefile
	src/Codecs/Makefile
	src/Filters/Makefile
	src/Funky/Makefile
	src/Message/Makefile
	src/Net/Makefile
	src/Objects/Makefile
	src/Objects/Entity/Makefile
	src/Objects/Operation/Makefile
	tests/Makefile
	tests/Objects/Makefile
	tutorial/Makefile
	benchmark/Makefile
])
